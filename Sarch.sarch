architecture {
    software_system: GraderUN;
    author: Team_2E;

    architectural_views {

        decomposition_view ::

            elements {
                module Notas;
                module Clases;
                module InformacionPersonal;
                module GestionAcademica;
                module Autenticacion;
                module Interoperabilidad;

                submodule NotasEstudiantes;
                submodule NotasProfesores;
                submodule NotasAdministrativos;

                submodule ClasesEstudiantes;
                submodule ClasesProfesores;
                submodule ClasesAdministrativos;

                submodule InformacionEstudiantes;
                submodule InformacionProfesores;
                submodule InformacionAdministrativos;

                submodule SolicitudesEstudiantes;
                submodule SolicitudesProfesores;
                submodule GestionAdministrativos;

                submodule ExponerDeServicio;
                submodule ConsumirServicio;

                functionality VerNotasParciales;
                functionality VerBoletines;
                functionality VerPromedioCurso;
                functionality VerPuestoDelCurso;

                functionality VerListaDeEstudiantes;
                functionality AsignarNotasParciales;
                functionality ActualizarNotasParciales;
                functionality ConsolidarNotasDefinitivas;

                functionality GenerarBoletines;
                functionality GenerarEstadisticas;

                functionality VerHorario;
                functionality VerContenidos;
                functionality VerMiCurso;
                functionality VerMateria;

                functionality GestionarSalones;
                functionality GestionarCursos;
                functionality GestionarContenidos;
                functionality GestionarMateria;
                functionality AsignarProfesorMateria;
                functionality GestionarClases;

                functionality VerInformacionProfesores;
                functionality BuscarProfesores;
                functionality VerHistorialAcademico;
                functionality VerDatosPersonalesYAcudiente;

                functionality VerInformacionEstudiantes;
                functionality BuscarEstudiantes;
                functionality VerDatosPersonales;

                functionality GestionarDatosInstitucionales;
                functionality VerInformacionAdiministrativos;

                functionality SolicitarCetificadosDeEstudio;
                functionality SolicitarReuniones;
                functionality SolicitarCertificadoNotas;
                functionality SolicitarModificacionInformacionPersonal;

                functionality SolicitarSalonesYRecursos;
                functionality SolicitarCertificadoLaboral;
                functionality SolicitarModificacionInformacionPersonal;

                functionality ProcesarSolicitudes;

                functionality AutenticarSesion;
                functionality ActualizarDatosAcceso;
                functionality BorrarDatosAcceso;

                functionality EnviarUsuariosEstudiantes;
                functionality EnviarUsuariosProfesores;
                functionality EnviarUsuariosAdministrativos;

                functionality RecibirPuntajes;
            }

            relations {
                sm: NotasEstudiantes is_part_of m: Notas;
                sm: NotasProfesores is_part_of m: Notas;
                sm: NotasAdministrativos is_part_of m: Notas;

                sm: ClasesEstudiantes is_part_of m: Clases;
                sm: ClasesProfesores is_part_of m: Clases;
                sm: ClasesAdministrativos is_part_of m: Clases;

                sm: InformacionEstudiantes is_part_of m: InformacionPersonal;
                sm: InformacionProfesores is_part_of m: InformacionPersonal;
                sm: InformacionAdministrativos is_part_of m: InformacionPersonal;

                sm: SolicitudesEstudiantes is_part_of m: GestionAcademica;
                sm: SolicitudesProfesores is_part_of m: GestionAcademica;
                sm: GestionAdministrativos is_part_of m: GestionAcademica;

                sm: ExponerDeServicio is_part_of m: Interoperabilidad;
                sm: ConsumirServicio is_part_of m: Interoperabilidad;

                f: VerNotasParciales is_part_of sm: NotasEstudiantes;
                f: VerBoletines is_part_of sm: NotasEstudiantes;
                f: VerPromedioCurso is_part_of sm: NotasEstudiantes;
                f: VerPuestoDelCurso is_part_of sm: NotasEstudiantes;

                f: VerListaDeEstudiantes is_part_of sm: NotasProfesores;
                f: AsignarNotasParciales is_part_of sm: NotasProfesores;
                f: ActualizarNotasParciales is_part_of sm: NotasProfesores;
                f: ConsolidarNotasDefinitivas is_part_of sm: NotasProfesores;

                f: GenerarBoletines is_part_of sm: NotasAdministrativos;

                f: VerHorario is_part_of sm: ClasesEstudiantes;
                f: VerContenidos is_part_of sm: ClasesEstudiantes;
                f: VerMiCurso is_part_of sm: ClasesEstudiantes;
                f: VerMateria is_part_of sm: ClasesEstudiantes;

                f: VerHorario is_part_of sm: ClasesProfesores;
                f: VerContenidos is_part_of sm: ClasesProfesores;
                f: VerMiCurso is_part_of sm: ClasesProfesores;
                f: VerMateria is_part_of sm: ClasesProfesores;

                f: GestionarSalones is_part_of sm: ClasesAdministrativos;
                f: GestionarCursos is_part_of sm: ClasesAdministrativos;
                f: GestionarContenidos is_part_of sm: ClasesAdministrativos;
                f: GestionarMateria is_part_of sm: ClasesAdministrativos;
                f: AsignarProfesorMateria is_part_of sm: ClasesAdministrativos;
				f: GestionarClases is_part_of sm: ClasesAdministrativos;

                f: VerInformacionProfesores is_part_of sm: InformacionEstudiantes;
                f: BuscarProfesores is_part_of sm: InformacionEstudiantes;
                f: VerHistorialAcademico is_part_of sm: InformacionEstudiantes;
                f: VerDatosPersonalesYAcudiente is_part_of sm: InformacionEstudiantes;

                f: VerInformacionEstudiantes is_part_of sm: InformacionProfesores;
                f: BuscarEstudiantes is_part_of sm: InformacionProfesores;
                f: VerDatosPersonales is_part_of sm: InformacionProfesores;

                f: GestionarDatosInstitucionales is_part_of sm: InformacionAdministrativos;
                f: VerInformacionAdiministrativos is_part_of sm: InformacionAdministrativos;

                f: SolicitarCetificadosDeEstudio is_part_of sm: SolicitudesEstudiantes;
                f: SolicitarReuniones is_part_of sm: SolicitudesEstudiantes;
                f: SolicitarCertificadoNotas is_part_of sm: SolicitudesEstudiantes;
                f: SolicitarModificacionInformacionPersonal is_part_of sm: SolicitudesEstudiantes;

                f: SolicitarSalonesYRecursos is_part_of sm: SolicitudesProfesores;
                f: SolicitarCertificadoLaboral is_part_of sm: SolicitudesProfesores;
                f: SolicitarReuniones is_part_of sm: SolicitudesProfesores;
                f: SolicitarModificacionInformacionPersonal is_part_of sm: SolicitudesProfesores;

                f: ProcesarSolicitudes is_part_of sm: GestionAdministrativos;

                f: AutenticarSesion is_part_of m: Autenticacion;
                f: ActualizarDatosAcceso is_part_of m: Autenticacion;
                f: BorrarDatosAcceso is_part_of m: Autenticacion;

                f: AutenticarSesion is_part_of sm: ExponerDeServicio;
                f: ActualizarDatosAcceso is_part_of sm: ExponerDeServicio;
                f: BorrarDatosAcceso is_part_of sm: ExponerDeServicio;

                f: EnviarUsuariosEstudiantes is_part_of sm: ConsumirServicio;
            }
        ::

        component_and_connector_view ::

            elements {

                programming_languages {
                    java;
                    python;
                    javascript;
                    golang;
                    ruby;
                    c_sharp;
		    		c;
                    php;
                    rust;
                    typescript;
                    nginx;
                }

                db_systems {
                    mysql;
                    mariadb;
                    firebase;
                    mongodb;
                }

                component_types {
                    frontend;
                    backend;
                    database;
                    authentication;
                }

                component backend consultarNotas(programming_language javascript);
                component backend gestionarNotas(programming_language php);
                component database notas_db(db_system mysql);

                component backend gestionarSalones(programming_language golang);
                component backend gestionarCursos(programming_language c_sharp);
                component database cursos_y_salones_db (db_system mongodb);

                component backend gestionarMaterias(programming_language rust);
                component database gestion_de_materias_db(db_system mysql);

                component backend gestionarUsuarios(programming_language java);
                component database gestionar_usuarios_db(db_system mysql);

                component backend gestionarSolicitudes(programming_language ruby);
                component database gestionar_solicitudes_db(db_system mongodb);

                component backend autenticacion(programming_language python);
                component database autenticacion_db(db_system firebase);

                component backend api_gateway(programming_language javascript);

                component frontend ss_web(programming_language javascript);
                component frontend ss_mobile(programming_language typescript);

				component backend reverseProxy(programming_language nginx);
				component backend LDAP_Server(programming_language c);
				component backend SOAP_manager(programming_language javascript);

				component backend SSInterfacenext(programming_language javascript);
				component backend SSInterfaceprevious(programming_language javascript);


                connector mongodb_driver;
                connector php_sql;
                connector js_sql;
                connector diesel;
                connector java_sql;
                connector firebase;

                connector rest;
                connector GraphQL;
                connector SOAP;
                connector LDAP;
            }

            relations {
                attachment (js_sql: consultarNotas, notas_db);
                attachment (php_sql: gestionarNotas, notas_db);

                attachment (mongodb_driver: gestionarCursos , cursos_y_salones_db);
                attachment (mongodb_driver: gestionarSalones , cursos_y_salones_db);

                attachment (diesel: gestionarMaterias, gestion_de_materias_db);

                attachment (java_sql: gestionarUsuarios , gestionar_usuarios_db);

                attachment (rest: gestionarSolicitudes , gestionar_solicitudes_db);

                attachment (firebase: autenticacion , autenticacion_db);

                attachment (GraphQL: ss_web, api_gateway);
                attachment (GraphQL: ss_mobile, api_gateway);

                attachment (rest: api_gateway, consultarNotas);
                attachment (rest: api_gateway, gestionarNotas);
                attachment (rest: api_gateway, gestionarCursos);
                attachment (rest: api_gateway, gestionarSalones);
                attachment (rest: api_gateway, gestionarMaterias);
                attachment (rest: api_gateway, gestionarUsuarios);
                attachment (rest: api_gateway, gestionarSolicitudes);
                attachment (rest: api_gateway, autenticacion);

                attachment (SOAP:  SOAP_manager,SSInterfacenext);
                attachment (SOAP:  SSInterfaceprevious , SOAP_manager);
                attachment (GraphQL:  SOAP_manager,reverseProxy);
                attachment (rest:  api_gateway,SOAP_manager);

                attachment (LDAP: api_gateway,LDAP_Server);

                attachment (GraphQL: reverseProxy,api_gateway);
                attachment (GraphQL: ss_web,reverseProxy);
                attachment (GraphQL: ss_mobile,reverseProxy);

            }
        ::

        data_model_view ::

            nosql data_model cursos_y_salones_db {

                elements {

                    data_entity estudiantes {
                        attributes {
                            string id;
                        }
                    }


                    data_entity cursos{
                        attributes {
                            string id;
                            int grado;
                            string letra;
                        }
                    }

                    data_entity salones_asignados{
                        attributes {
                            string id;
                            string horario;
                            string materia;
                            string profesor;
                        }
                    }

                    data_entity salones{
                        attributes {
                            string id;
                            string descripcion;
                            int capacidad;
                        }
                    }

                    data_entity profesor{
                        attributes {
                            string id;
                        }
                    }
                }

                relations {
                    aggregation (cursos, salones_asignados);
                    aggregation (salones, salones_asignados);
                    association (estudiantes, cursos);
                }
            }

            relational data_model gestion_de_materias_db {

                elements{

                    data_entity subject{
                        attributes{
                            int id;
                            string name;
                            int content;
                        }
                    }

                    data_entity teacher{
                        attributes{
                            int id_subject;
                            int id_teacher;
                        }
                    }
                }

                relations {
                    many_to_many (subject, teacher);
                }
            }

            relational data_model auth_database{

                elements {

                    data_entity auth_data{
                        attributes {
                            string email;
                            string password;
                        }
                    }

                    data_entity session{
                        attributes {
                            string email;
                            string uid;
                            string token;
                            string created_at;
                        }
                    }
                }

                relations {
                    aggregation (auth_data, session);
                }
            }

            nosql data_model solicitudes_database{

                elements {

                    data_entity solicitud_profesores{
                        attributes {
                            string id;
                            string tipo;
                            string fecha;
                            string informacion_adicional;
                        }
                    }

                    data_entity solicitud_estudiantes{
                        attributes {
                            string id;
                            string tipo;
                            string fecha;
                            string informacion_adicional;
                        }
                    }

                    data_entity estudiantes{
                        attributes {
                            string id;
                        }
                    }

                    data_entity profesores{
                        attributes {
                            string id;
                        }
                    }
                }

                relations {
                    aggregation (estudiantes, solicitud_estudiantes);
                    aggregation (profesores, solicitud_profesores);
                }
            }

            relational data_model graderNotasDB {

                elements {
                    data_entity tablaTipoNotas {
                        attributes {
                            int tipoNotasId  ;
                            string tipoNotasNombre  ;
                            string tipoNotasIdClase  ;
                        }
                    }
                    data_entity tablaNotas {
                        attributes {
                            int notasId  ;
                            int notasIdEstudiante  ;
                            int notastipoNotasId ;
                            float notasValor ;
                            int notasPorcentaje ;
                            int notasPeriodo ;
                            string notasComentarios ;
                        }
                    }
                }
                relations {
                    one_to_many (tablaNotas, tablaTipoNotas);
                }
            }
        ::

        layered_view ::

			elements {

				tier presentation;
				tier integration;
				tier logic;
				tier data;

				layer Router;
				layer WebComponent;

				layer mobileApp;
				layer mobilecomponents;
				layer mobileStyle;

				layer resource;
				layer service;
				layer dataSource;

				layer apiGatewayschema;
				layer apiGatewayresolvers;
				layer apiGatewayConection;

				layer consultarNotasApi;
				layer consultarNotasmodel;
				layer consultarNotasconnection;

				layer gestionarNotasApi;
				layer gestionarNotasmodel;
				layer gestionarNotasconnection;

				layer gestionarSaloneApi;
				layer gestionarSalonescontroller;
				layer gestionarSalonesmodel;

				layer gestionarMateriasRESTServer;
				layer gestionarMateriasRequestHandler;
				layer gestionarMateriasDriver;
				layer gestionarMateriasSchema;
				layer gestionarMateriasModel;

				layer gestionarCursosService;
				layer gestionarCursosController;
				layer gestionarCursosRepository;

				layer gestionarSolicitudesService;
				layer gestionarSolicitudesController;
				layer gestionarSolicitudesRepository;

				layer GestionarusuarioRepository;
				layer GestionarusuarioController;
				layer GestionarusuarioService;

				layer authAPI;
				layer AuthController;
				layer Auth_FirebaseConnection;

				layer_segment webtemplate;
				layer_segment webScript;
				layer_segment webStyle ;

				layer_segment schemaSoap;
				layer_segment routesRest;

				layer_segment operationsSoap;
				layer_segment controllersRest;

				layer_segment msRequests;
				layer_segment clientSoap;
			}

			relations {

				t: presentation allowed_to_use t: integration;
				t: integration allowed_to_use logic;
				t: logic allowed_to_use t: data;

				t: presentation contains c: ss_web;
				t: presentation contains c: ss_mobile;

				t: integration contains c: SOAP_manager;
				t: integration contains c: reverseProxy;
				t: integration contains c: api_gateway;

				t: logic contains c: consultarNotas;
				t: logic contains c: gestionarNotas;
				t: logic contains c: gestionarCursos;
				t: logic contains c: gestionarSalones;
				t: logic contains c: gestionarMaterias;
				t: logic contains c: gestionarUsuarios;
				t: logic contains c: gestionarSolicitudes;
				t: logic contains c: autenticacion;

				t: data contains c: graderNotasDB;
				t: data contains c: cursos_y_salones_db;
				t: data contains c: gestion_de_materias_db;
				t: data contains c: gestionar_usuarios_db;
				t: data contains c: solicitudes_database;
				t: data contains c: auth_database;
				t: data contains c: LDAP_Server;


				c: ss_mobile contains l: mobileApp;
				c: ss_mobile contains l: mobilecomponents;
				c: ss_mobile contains l: mobileStyle;

				ls: mobileApp allowed_to_use l: mobilecomponents
				ls: mobilecomponents allowed_to_use l: mobileStyle

				c: ss_web contains l: WebComponent;
				c: ss_web contains l: Router;

				l: WebComponent contains ls: webtemplate;
				l: WebComponent contains ls: webScript;
				l: WebComponent contains ls: webStyle;

				l: Router allowed_to_use WebComponent
				ls: webtemplate allowed_to_use ls: webScript;
				ls: webScript allowed_to_use ls: webStyle;

				c: SOAP_manager contains l: resource;
				c: SOAP_manager contains l: service;
				c: SOAP_manager contains l: dataSource;

				l: resource contains ls: schemaSoap;
				l: resource contains ls: routesRest;

				l: service contains ls: operationsSoap;
				l: service contains ls: controllersRest;

				l: dataSource contains ls: msRequests;
				l: dataSource contains ls: clientSoap;

				ls: schemaSoap allowed_to_use ls: operationsSoap;
				ls: operationsSoap allowed_to_use ls: msRequests;

				ls: routesRest allowed_to_use ls: controllersRest;
				ls: controllersRest allowed_to_use ls: clientSoap;

				c: api_gateway contains l: apiGatewayresolvers;
				c: api_gateway contains l: apiGatewayschema;
				c: api_gateway contains l: apiGatewayConnection;

				l: apiGatewayschema allowed_to_use apiGatewayresolvers;
				l: apiGatewayresolvers allowed_to_use apiGatewayConnection;

				c: consultarNotas contains l: consultarNotasApi;
				c: consultarNotas contains l: consultarNotasmodel;
				c: consultarNotas contains l: consultarNotasconnection;

				l: consultarNotasApi allowed_to_use consultarNotasmodel;
				l: consultarNotasmodel allowed_to_use consultarNotasconnection;


				c: gestionarNotas contains l: gestionar_Notas_Api;
                		c: gestionarNotas contains l: gestionar_Notas_model;
                		c: gestionarNotas contains l: gestionar_Notas_connection;

				l: gestionar_Notas_Api allowed_to_use l: gestionar_Notas_model;
                		l: gestionar_Notas_model allowed_to_use l: gestionar_Notas_connection;

				c: gestionarCursos contains l: gestionarCursosService;
				c: gestionarCursos contains l: gestionarCursosController;
				c: gestionarCursos contains l: gestionarCursosRepository;

				l: gestionarCursosService allowed_to_use l: gestionarCursosController;
                		l: gestionarCursosController allowed_to_use l: gestionarCursosRepository ;

				c: gestionarSalones contains l: gestionarSaloneApi;
				c: gestionarSalones contains l: gestionarSalonescontroller;
				c: gestionarSalones contains l: gestionarSalonesmodel;

				l: gestionarSaloneApi allowed_to_use l: gestionarSalonescontroller;
                		l: gestionarSalonescontroller allowed_to_use l: gestionarSalonesmodel ;


				c: gestionarMaterias contains l: gestionarMateriasRESTServer;
				c: gestionarMaterias contains l: gestionarMateriasRequestHandler;
				c: gestionarMaterias contains l: gestionarMateriasDriver;
				c: gestionarMaterias contains l: gestionarMateriasSchema;
				c: gestionarMaterias contains l: gestionarMateriasModel;

				l: gestionarMateriasRESTServer allowed_to_use l: gestionarMateriasRequestHandler;
                		l: gestionarMateriasRequestHandler allowed_to_use l: gestionarMateriasModel;
				l: gestionarMateriasRequestHandler allowed_to_use l: gestionarMateriasDriver;
                		l: gestionarMateriasDriver allowed_to_use l: gestionarMateriasSchema;

				c: gestionarUsuarios contains l:GestionarusuarioRepository;
				c: gestionarUsuarios contains l:GestionarusuarioService;
				c: gestionarUsuarios contains l:GestionarusuarioController;

				l: GestionarusuarioService allowed_to_use l: GestionarusuarioController;
                		l: GestionarusuarioController allowed_to_use l: GestionarusuarioRepository ;


				c: gestionarSolicitudes contains l:gestionarSolicitudesService;
				c: gestionarSolicitudes contains l:gestionarSolicitudesController;
				c: gestionarSolicitudes contains l:gestionarSolicitudesRepository;

				l: gestionarSolicitudesService allowed_to_use l: gestionarSolicitudesController;
                		l: gestionarSolicitudesController allowed_to_use l: gestionarSolicitudesRepository ;

				c: autenticacion contains l: authAPI;
				c: autenticacion contains l: AuthController;
				c: autenticacion contains l: Auth_FirebaseConnection;

				l: authAPI allowed_to_use l: AuthController;
                		l: AuthController allowed_to_use l: Auth_FirebaseConnection ;

			}
        ::

        deployment_view ::

            elements {

                environmental_element_types {
                    ec2_node;
                    rds_node;
                    container;
                    mobile_phone;
                }

                operating_systems {
                    ubuntu;
                    android;
                }

                execution_environments {
                    clr; // Common Language Runtime
                    jvm; // Java Virtual Machine
                    python_exec;
                    go;
                    ruby_exec;
                    nodejs;
                    php;
                    binary;

                    mysql;
                    mongodb;
                    mariadb;
                    firebase;
                }

                software_element consultarNotas_ms (component consultarNotas){}
                software_element gestionarNotas_ms (component gestionarNotas){}
                software_element gestionarSalones_ms (component gestionarSalones){}
                software_element gestionarCursos_ms (component gestionarCursos){}
                software_element gestionarMaterias_ms(component gestionarMaterias){}
                software_element gestionarUsuarios_ms (component gestionarUsuarios){}
                software_element gestionarSolicitudes_ms (component gestionarSolicitudes){}
                software_element autenticacion_ms (component autenticacion){}

                software_element api_gateway_ms (component api_gateway){}

                software_element ss_web_prod (component ss_web){}
                software_element ss_mobile_prod (component ss_mobile){}
                
                software_element reverse_proxy (component reverseProxy){}
                software_element LDAP_server (component LDAP_Server){}
                
                software_element SOAP_interface (component SOAP_manager){}

                environmental_element node node1 {
                    ip: 'NODE1_IP';
                    dns: 'NODE1_DNS';
                    operating_system: ubuntu;
                    cpu: '2xcore';
                    ram: 4 gB;
                    storage_storage: 8 gB;
                    provider: 'AWS';
                }

                environmental_element node node2 {
                    ip: 'NODE2_IP';
                    dns: 'NODE2_DNS';
                    operating_system: ubuntu;
                    cpu: '2xcore';
                    ram: 4 gB;
                    storage_storage: 8 gB;
                    provider: 'AWS';
                }

                environmental_element node node3 {
                    ip: 'NODE3_IP';
                    dns: 'NODE3_DNS';
                    operating_system: ubuntu;
                    cpu: '2xcore';
                    ram: 4 gB;
                    storage_storage: 8 gB;
                    provider: 'AWS';
                }

                environmental_element node node4 {
                    ip: 'NODE4_IP';
                    dns: 'NODE4_DNS';
                    operating_system: ubuntu;
                    cpu: '2xcore';
                    ram: 4 gB;
                    storage_storage: 8 gB;
                    provider: 'AWS';
                }

                environmental_element node node5 {
                    ip: 'NODE5_IP';
                    dns: 'NODE5_DNS';
                    operating_system: ubuntu;
                    cpu: '2xcore';
                    ram: 4 gB;
                    storage_storage: 8 gB;
                    provider: 'AWS';
                }

                environmental_element node node6 {
                    ip: 'NODE6_IP';
                    dns: 'NODE6_DNS';
                    operating_system: ubuntu;
                    cpu: '2xcore';
                    ram: 4 gB;
                    storage_storage: 8 gB;
                    provider: 'AWS';
                }

                environmental_element node node7 {
                    ip: 'NODE7_IP';
                    dns: 'NODE7_DNS';
                    operating_system: ubuntu;
                    cpu: '2xcore';
                    ram: 4 gB;
                    storage_storage: 8 gB;
                    provider: 'AWS';
                }

                environmental_element node node8 {
                    ip: 'NODE8_IP';
                    dns: 'NODE8_DNS';
                    operating_system: ubuntu;
                    cpu: '2xcore';
                    ram: 4 gB;
                    storage_storage: 8 gB;
                    provider: 'AWS';
                }

                environmental_element container container1 {}
                environmental_element container container2 {}
                environmental_element container container3 {}
                environmental_element container container4 {}
                environmental_element container container5 {}
                environmental_element container container6 {}
                environmental_element container container7 {}
                environmental_element container container8 {}
                environmental_element container container9 {}
                environmental_element container container10 {}
                environmental_element container container11 {}
                environmental_element container container12 {}
                environmental_element container container13 {}

                environmental_element mobile_phone my_phone {
                    operating_systems: android;
                }
            }

            relations {

                ee: node1 contains ee: container1;
                ee: node2 contains ee: container2;
                ee: node3 contains ee: container3;
                ee: node4 contains ee: container4;
                ee: node5 contains ee: container5;
                ee: node6 contains ee: container6;
                ee: node7 contains ee: container7;
                ee: node8 contains ee: container8;
                ee: node1 contains ee: container9;
                ee: node7 contains ee: container10;
                ee: node4 contains ee: container11;
                ee: node8 contains ee: container12;
                ee: node8 contains ee: container13;

                se: consultarNotas_ms deployed_in ee: container1 (execution_environment nodejs)(port 3000);
                se: gestionarNotas_ms deployed_in ee: container2 (execution_environment php)(port 4000);
                se: gestionarSalones_ms deployed_in ee: container3 (execution_environment go)(port 8080);
                se: autenticacion_ms deployed_in ee: container4 (execution_environment python_exec)(port 8000);
                se: gestionarMaterias_ms deployed_in ee: container5 (execution_environment binary)(port 4000);
                se: gestionarSolicitudes_ms deployed_in ee: container6 (execution_environment ruby_exec)(port 80);
                se: gestionarCursos_ms deployed_in ee: container7 (execution_environment clr)(port 80);
                se: gestionarUsuarios_ms deployed_in ee: container8 (execution_environment jvm)(port 80);
                se: api_gateway_ms deployed_in ee: container9 (execution_environment nodejs)(port 8000);
                se: ss_web_prod deployed_in ee: container10 (execution_environment nodejs)(port 80);
                se: LDAP_server deployed_in ee: container11 (execution_environment binary)(port 8085);
                se: reverse_proxy deployed_in ee: container12 (execution_environment nginx)(port 2000);
                se: SOAP_interface deployed_in ee: container13 (execution_environment nodejs)(port 8000);
                se: ss_mobile_prod deployed_in ee: my_phone;
            }

        ::
    }
}
