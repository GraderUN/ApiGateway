architecture {
    software_system: GraderUN;
    author: Everyone;

    architectural_views {

        decomposition_view ::

            elements {
                module Notas;
                module Clases;
                module InformacionPersonal;
                module GestionAcademica;
                module Autenticacion;

                submodule NotasEstudiantes;
                submodule NotasProfesores;
                submodule NotasAdministrativos;

                submodule ClasesEstudiantes;
                submodule ClasesProfesores;
                submodule ClasesAdministrativos;

                submodule InformacionEstudiantes;
                submodule InformacionProfesores;
                submodule InformacionAdministrativos;

                submodule SolicitudesEstudiantes;
                submodule SolicitudesProfesores;
                submodule GestionAdministrativos;

                functionality VerNotasParciales;
                functionality VerBoletines;
                functionality VerPromedioCurso;
                functionality VerPuestoDelCurso;

                functionality VerListaDeEstudiantes;
                functionality AsignarNotasParciales;
                functionality ActualizarNotasParciales;
                functionality ConsolidarNotasDefinitivas;

                functionality GenerarBoletines;
                functionality GenerarEstadisticas;

                functionality VerHorario;
                functionality VerContenidos;
                functionality VerMiCurso;
                functionality VerMateria;

                functionality GestionarSalones;
                functionality GestionarCursos;
                functionality GestionarContenidos;
                functionality GestionarMateria;
                functionality AsignarProfesorMateria;

                functionality VerInformacionProfesores;
                functionality BuscarProfesores;
                functionality VerHistorialAcademico;
                functionality VerDatosPersonalesYAcudiente;

                functionality VerInformacionEstudiantes;
                functionality BuscarEstudiantes;
                functionality VerDatosPersonales;

                functionality GestionarDatosInstitucionales;
                functionality VerInformacionAdiministrativos;

                functionality SolicitarCetificadosDeEstudio;
                functionality SolicitarReuniones;
                functionality SolicitarCertificadoNotas;
                functionality SolicitarModificacionInformacionPersonal;

                functionality SolicitarSalonesYRecursos;
                functionality SolicitarCertificadoLaboral;
                functionality SolicitarModificacionInformacionPersonal;

                functionality ProcesarSolicitudes;

                functionality AutenticarSesion;
                functionality ActualizarDatosAcceso;
                functionality BorrarDatosAcceso;
            }

            relations {
                sm: NotasEstudiantes is_part_of m: Notas;
                sm: NotasProfesores is_part_of m: Notas;
                sm: NotasAdministrativos is_part_of m: Notas;

                sm: ClasesEstudiantes is_part_of m: Clases;
                sm: ClasesProfesores is_part_of m: Clases;
                sm: ClasesAdministrativos is_part_of m: Clases;

                sm: InformacionEstudiantes is_part_of m: InformacionPersonal;
                sm: InformacionProfesores is_part_of m: InformacionPersonal;
                sm: InformacionAdministrativos is_part_of m: InformacionPersonal;

                sm: SolicitudesEstudiantes is_part_of m: GestionAcademica;
                sm: SolicitudesProfesores is_part_of m: GestionAcademica;
                sm: GestionAdministrativos is_part_of m: GestionAcademica;

                f: VerNotasParciales is_part_of sm: NotasEstudiantes;
                f: VerBoletines is_part_of sm: NotasEstudiantes;
                f: VerPromedioCurso is_part_of sm: NotasEstudiantes;
                f: VerPuestoDelCurso is_part_of sm: NotasEstudiantes;

                f: VerListaDeEstudiantes is_part_of sm: NotasProfesores;
                f: AsignarNotasParciales is_part_of sm: NotasProfesores;
                f: ActualizarNotasParciales is_part_of sm: NotasProfesores;
                f: ConsolidarNotasDefinitivas is_part_of sm: NotasProfesores;

                f: GenerarBoletines is_part_of sm: NotasAdministrativos;
                f: GenerarEstadisticas is_part_of sm: NotasAdministrativos;

                f: VerHorario is_part_of sm: ClasesEstudiantes;
                f: VerContenidos is_part_of sm: ClasesEstudiantes;
                f: VerMiCurso is_part_of sm: ClasesEstudiantes;
                f: VerMateria is_part_of sm: ClasesEstudiantes;

                f: VerHorario is_part_of sm: ClasesProfesores;
                f: VerContenidos is_part_of sm: ClasesProfesores;
                f: VerMiCurso is_part_of sm: ClasesProfesores;
                f: VerMateria is_part_of sm: ClasesProfesores;

                f: GestionarSalones is_part_of sm: ClasesAdministrativos;
                f: GestionarCursos is_part_of sm: ClasesAdministrativos;
                f: GestionarContenidos is_part_of sm: ClasesAdministrativos;
                f: GestionarMateria is_part_of sm: ClasesAdministrativos;
                f: AsignarProfesorMateria is_part_of sm: ClasesAdministrativos;

                f: VerInformacionProfesores is_part_of sm: InformacionEstudiantes;
                f: BuscarProfesores is_part_of sm: InformacionEstudiantes;
                f: VerHistorialAcademico is_part_of sm: InformacionEstudiantes;
                f: VerDatosPersonalesYAcudiente is_part_of sm: InformacionEstudiantes;

                f: VerInformacionEstudiantes is_part_of sm: InformacionProfesores;
                f: BuscarEstudiantes is_part_of sm: InformacionProfesores;
                f: VerDatosPersonales is_part_of sm: InformacionProfesores;

                f: GestionarDatosInstitucionales is_part_of sm: InformacionAdministrativos;
                f: VerInformacionAdiministrativos is_part_of sm: InformacionAdministrativos;

                f: SolicitarCetificadosDeEstudio is_part_of sm: SolicitudesEstudiantes;
                f: SolicitarReuniones is_part_of sm: SolicitudesEstudiantes;
                f: SolicitarCertificadoNotas is_part_of sm: SolicitudesEstudiantes;
                f: SolicitarModificacionInformacionPersonal is_part_of sm: SolicitudesEstudiantes;

                f: SolicitarSalonesYRecursos is_part_of sm: SolicitudesProfesores;
                f: SolicitarCertificadoLaboral is_part_of sm: SolicitudesProfesores;
                f: SolicitarReuniones is_part_of sm: SolicitudesProfesores;
                f: SolicitarModificacionInformacionPersonal is_part_of sm: SolicitudesProfesores;

                f: ProcesarSolicitudes is_part_of sm: GestionAdministrativos;

                f: AutenticarSesion is_part_of m: Autenticacion;
                f: ActualizarDatosAcceso is_part_of m: Autenticacion;
                f: BorrarDatosAcceso is_part_of m: Autenticacion;
            }
        ::

        component_and_connector_view ::

            elements {

                programming_languages {
                    java;
                    python;
                    javascript;
                    golang;
                    ruby;
                    c_sharp;
                    php;
                    rust;
                    vue;
                    flutter;
                }

                db_systems {
                    mysql;
                    mariadb;
                    firebase;
                    mongodb;
                }

                component_types {
                    frontend;
                    backend;
                    database;
                    authentication;
                }

                component backend consultarNotas(programming_language javascript);
                component backend gestionarNotas(programming_language php);
                component database notas_db(db_system mysql);

                component backend gestionarSalones(programming_language golang);
                component backend gestionarCursos(programming_language c_sharp);
                component database cursos_y_salones_db (db_system mongodb);

                component backend gestionarMaterias(programming_language rust);
                component database gestion_de_materias_db(db_system mysql);

                component backend gestionarUsuarios(programming_language java);
                component database gestionar_usuarios_db(db_system mysql);

                component backend gestionarSolicitudes(programming_language ruby);
                component database gestionar_solicitudes_db(db_system mongodb);

                component backend autenticacion(programming_language python);
                component database autenticacion_db(db_system firebase);

                component backend api_gateway(programming_language javascript);

                component frontend ss_web(programming_language vue);
                component frontend ss_mobile(programming_language flutter);

                connector mongodb_driver;
                connector php_sql;
                connector js_sql;
                connector diesel;
                connector java_sql;
                connector firebase;

                connector rest;
                connector GraphQL;
            }

            relations {
                attachment (js_sql: consultarNotas, notas_db);
                attachment (php_sql: gestionarNotas, notas_db);

                attachment (mongodb_driver: gestionarCursos , cursos_y_salones_db);
                attachment (mongodb_driver: gestionarSalones , cursos_y_salones_db);

                attachment (diesel: gestionarMaterias, gestion_de_materias_db);

                attachment (java_sql: gestionarUsuarios , gestionar_usuarios_db);

                attachment (rest: gestionarSolicitudes , gestionar_solicitudes_db);

                attachment (firebase: autenticacion , autenticacion_db);

                attachment (GraphQL: ss_web, api_gateway);
                attachment (GraphQL: ss_mobile, api_gateway);

                attachment (rest: api_gateway, consultarNotas);
                attachment (rest: api_gateway, gestionarNotas);
                attachment (rest: api_gateway, gestionarCursos);
                attachment (rest: api_gateway, gestionarSalones);
                attachment (rest: api_gateway, gestionarMaterias);
                attachment (rest: api_gateway, gestionarUsuarios);
                attachment (rest: api_gateway, gestionarSolicitudes);
                attachment (rest: api_gateway, autenticacion);
            }


        ::

        data_model_view  ::


            nosql data_model cursos_salones {

                elements {

                    data_entity estudiantes {
                        attributes {
                            string id;
                        }
                	}


                    data_entity cursos{
                        attributes {
                            string id;
                            int grado;
                            string letra;
                        }
                    }

                    data_entity salones_asignados{
                        attributes {
                            string id;
                            string horario;
                            string materia;
                            string profesor;
                        }
                    }

                    data_entity salones{
                        attributes {
                            string id;
                            string descripcion;
                            int capacidad;
                        }
                    }

                    data_entity profesor{
                        attributes {
                            string id;
                        }
                    }
                }

                relations {
                    aggregation (cursos, salones_asignados);
                    aggregation (salones, salones_asignados);
                    association (estudiantes, cursos);
                }
            }

            relational data_model gestion_de_materias_db{

                elements{

                    data_entity subject{
                        attributes{
                            int id;
                            string name;
                            int content;
                        }
                    }

                    data_entity teacher{
                        attributes{
                            int id_subject;
                            int id_teacher;
                        }
                    }
                }

                relations {
                    many_to_many (subject, teacher);
                }
            }

            relational data_model auth_database{

                elements {

                    data_entity auth_data{
                        attributes {
                            string email;
                            string password;
                        }
                    }

                    data_entity session{
                        attributes {
                            string email;
                            string uid;
                            string token;
                            string created_at;
                        }
                    }
                }

                relations {
                    aggregation (auth_data, session);
                }
            }

            nosql data_model solicitudes_database{

                elements {

                    data_entity solicitud_profesores{
                        attributes {
                            string id;
                            string tipo;
                            string fecha;
                            string informacion_adicional;
                        }
                    }

                    data_entity solicitud_estudiantes{
                        attributes {
                            string id;
                            string tipo;
                            string fecha;
                            string informacion_adicional;
                        }
                    }

                    data_entity estudiantes{
                        attributes {
                            string id;
                        }
                    }

                    data_entity profesores{
                        attributes {
                            string id;
                        }
                    }
                }

                relations {
                    aggregation (estudiantes, solicitud_estudiantes);
                    aggregation (profesores, solicitud_profesores);
                }
            }

            relational data_model graderNotasDB {

				elements {
					data_entity tablaCurso {
						attributes {
							int cursoId ;
						}
					}
					data_entity tablaMateria {
						attributes {
							int materiaId ;
							string materiaNombre ;
							int materiaPeriodo ;
						}
					}
					data_entity tablaEstudiante {
						attributes {
							int estudianteId  ;
						}
					}
					data_entity tablaProfesor {
						attributes {
							int profesorId ;
							int profesorIdMateria ;
							int profesorIdCurso ;

						}
					}
					data_entity tablaCursoXEstudiante {
						attributes {
							int cursoXEstudianteId  ;
							int cursoXEstudianteIdCurso ;
							int cursoXEstudianteIdEstudiante ;
						}
					}
					data_entity tablaNotas {
						attributes {
							int notasId  ;
							int notasIdCursoEstudiante ;
							int notasIdMateria ;
							int notasIdProfesor ;
							float notasValor ;
							int notasPorcentaje ;
							int notasPeriodo ;
							string notasComentarios ;
						}
					}
				}

				relations {
					one_to_many (tablaCursoXEstudiante, tablaNotas);
					one_to_many (tablaMateria, tablaNotas);
					one_to_many (tablaProfesor, tablaNotas);
					one_to_many (tablaCurso, tablaCursoXEstudiante);
					one_to_many (tablaCurso, tablaProfesor);
					one_to_many (tablaMateria, tablaProfesor);
					one_to_many (tablaEstudiante, tablaCursoXEstudiante);
				}

			}
        ::

        layered_view ::

			elements {

				tier presentation;
				tier integration;
				tier logic;
				tier data;

				layer WebApp ;
				layer WebComponent;

				layer mobileApp;
				layer mobilecomponents;
				layer mobileStyle;

				layer apiGatewayschema;
				layer apiGatewayresolvers;
				layer apiGatewayConection

				layer consultarNotasApi
				layer consultarNotasmodel
				layer consultarNotasconnection

				layer gestionarNotasApi
				layer gestionarNotasmodel
				layer gestionarNotasconnection

				layer gestionarSaloneApi
				layer gestionarSalonescontroller
				layer gestionarSalonesmodel

				layer gestionarMateriasRESTServer
				layer gestionarMateriasRequestHandler
				layer gestionarMateriasDriver
				layer gestionarMateriasSchema
				layer gestionarMateriasModel

				layer gestionarCursosService
				layer gestionarCursosController
				layer gestionarCursosRepository

				layer gestionarSolicitudesService
				layer gestionarSolicitudesController
				layer gestionarSolicitudesRepository



				layer usuarioRepository
				layer usuarioService
				layer usuarioController

				layer_segment webtemplate;
				layer_segment webScript;
				layer_segment webStyle ;
			}

			relations {

				t: presentation allowed_to_use t: integration;
				t: integration allowed_to_use logic
				t: logic allowed_to_use t: data;

				t: presentation contains c: ss_web;
				t: presentation contains c: ss_mobile;

				t: integration contains c:api_gateway;

				consultarNotas);
                attachment (rest: api_gateway, gestionarNotas);
                attachment (rest: api_gateway, gestionarCursos);
                attachment (rest: api_gateway, gestionarSalones);
                attachment (rest: api_gateway, gestionarMaterias);
                attachment (rest: api_gateway, gestionarUsuarios);
                attachment (rest: api_gateway, gestionarSolicitudes);
                attachment (rest: api_gateway, autenticacion);

				t: logic contains c: gestionarNotas;
				t: logic contains c: gestionarCursos;
				t: logic contains c: gestionarSalones;
				t: logic contains c: gestionarMaterias;
				t: logic contains c: gestionarSalones;
				t: logic contains c: gestionarSalones;
				t: logic contains c: gestionarSalones;
				t: logic contains c: gestionarSalones;

				t: data contains c: ss_x_db;
				t: data contains c: ss_y_db;

				c: ss_wa contains l: gui;
				c: ss_wa contains l: server;

				l: gui contains ls: model;
				l: gui contains ls: view;
				l: gui contains ls: controller;

				l: gui allowed_to_use l: server;

				c: ss_ma contains l: activity;
				c: ss_ma contains l: repository;
				c: ss_ma contains l: server;

				l: activity allowed_to_use l: repository;
				l: repository allowed_to_use l: server;

				c: ss_api contains l: schema;
				c: ss_api contains l: resolver;
				c: ss_api contains l: server;

				l: schema allowed_to_use l: resolver;
				l: resolver allowed_to_use l: server;

				c: ss_x_ms contains l: api_view;
				c: ss_x_ms contains l: serializer;
				c: ss_x_ms contains l: model;

				l: api_view allowed_to_use_below l: serializer;
				l: serializer allowed_to_use l: model;

				c: ss_x_db contains l: database;
			}
		::
    }
}
